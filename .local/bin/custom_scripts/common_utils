#!/bin/sh

# creates a new directory at the current path and
# executes cd into it
mkcd() {
    if [ -d "$1" ];then
        echo "👎 Directory $1 already exists."
        return 1
    fi

    mkdir $1
    cd $1
    echo "📂 New directory created and cd'ed into it."
}

# Creates a .git directory and cd into it
mkgit() {
    if [ -d "$1" ];then
        echo "👎 Directory $1 already exists."
        return 1
    fi

    mkdir $1
    cd $1
    git init
    echo "🐈 Git directory created and cd'ed into it."
}

source_path="src"

# Creates a java file with the class template at the given package
# @param 1 package (. for current)
# @param 2 Class Name
touchjava() {
    if [ $# -lt 2 ]; then
        echo "❌ -> 📦 name or 🖹 name is missing";
        return 1;
    fi

    # check for empty package
    if [ -z $1 ];then
        echo "package details are missing"
        echo "❌ -> missing 📦 details";
        return 1
    fi

    # check for empty file
    if [ -z $2 ];then
        echo "❌ -> missing 🖹 name";
        return 1;
    fi

    echo "creating file(s)"
    package=$1
    file_name=$2
    package_path=$(echo $package | sed "s/\./\//g")

    file_path="$source_path/$package_path/$file_name"".java"
    mkdir -p -- "$(dirname -- "$file_path")"
    touch -- "$file_path"
    # Checks if the file needs to added in the current directory without package
    if [ $package != "." ];then
        echo "package $package;" > $file_path
    fi
    echo "public final class $file_name {  }" >> $file_path
    tree
    cat "$file_path"
}

jpackage-execjar() {
    if [ $# -lt 3 ]; then
        echo "❌ -> Not enough values supplied to create jar.";
        echo "Please supply \n1. jar file name \n2. Main Class Name \n3. Directory of files"
        return 1
    fi
    # v = verbose
    # c = create new
    # f = jar file name
    # e main class
    #-C = Change to directory
    jar vcfe $1 $2 -C $3 .
}

jpackage-jar() {
    if [ $# -lt 2 ]; then
        echo "❌ -> Not enough values supplied to create jar.";
        echo "Please supply \n1. jar file name \n2. Directory of files"
        return 1
    fi
    # v = verbose
    # c = create new
    # f = jar file name
    # e main class
    #-C = Change to directory
    jar vcf $1 -C $2 .
}

# Create a shell script and gives executable permission to it
# @param 1 : File Name
touchexec() {
    if [ $# -lt 1 ]; then
        echo "❌ -> missing 🖹 name";
        return 1;
    fi
    touch $1
    echo "#!/bin/sh" >> $1
    chmod +x $1
    cat $1
}

# removes the all files of given type, recursively in the current directory
# param 1 : file type
rmtype() {
    # exit if no type is given
    if [ -z $1 ];then
        echo "❌ -> missing 🖹 type";
        return 1
    fi
    # fd adheres to .gitignore
    # so --hiddent and --no-ignore is included in the search optoin
    for file in $(fd --hidden --no-ignore --base-directory . --type f -e $1); do
        rm $file
    done
}


caldate() {
    local day
    local month
    local year
    if [ -z $1 ];then
        day=$(date +"%d")
    else
        day=$1
    fi

    if [ -z $1 ];then
        month=$(date +"%m")
    else
        month=$2
    fi

    if [ -z $3 ];then
        year=$(date +"%Y")
    else
        year=$3
    fi
    cal $day $month $year
}

topdf() {
    local output
    if [ -z $1 ];then
        echo "❌ -> missing input(🍎)";
        return 1
    fi

    if [ -z $2 ];then
        echo "⚠ -> missing output(🍷)name. using the input name";
        output=$1.pdf
    fi
   pandoc --pdf-engine=wkhtmltopdf $1.md -o $output
}


