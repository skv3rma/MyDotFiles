# Basic Settings
# set previewer ~/.config/lf/preview
set preview true
set previewer pistol
set drawbox true
set icons true
set ignorecase true
set smartcase true

# shell options
set shell zsh
set shellopts '-euy'
set ifs "\n"
set filesep "\n"  # default already


# for proper parsing of text
# set shellopts '-euy'

# symbols to use before script
# & => async
# $ => in shell (blocking)
# % => shell pipe (runs in shell and pipes the command into ui)
# ! => shell wait

# Custom Functions
# dynamically change the no of columns based on terminal width
%{{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3"
    fi
}}
# displays the progress bar while copying/moving
cmd paste &{{
    set -- $(lf -remote load)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    lf -remote "send load"
    lf -remote "send clear"
}}

# & is used means this is async in nature
cmd paste-async &{{
    set -- $(lf -remote load)
    mode="$1"
    shift
    case "$mode" in
        copy) cp -rn -- "$@" .;;
        move) mv -n -- "$@" .;;
    esac
    lf -remote "send load"
    lf -remote "send clear"
}}


# bulk rename by using utility vidir
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    [ -n "$fs" ] && fs="$(ls)"
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l "$new")" -ne "$(wc -l "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd bulk-rename-selected ${{
    old="$(mktemp)"
    new="$(mktemp)"
    [ -n "$fx" ]
    printf '%s\n' "$fx" >"$old"
    printf '%s\n' "$fx" >"$new"
    $EDITOR "$new"
    [ "$(wc -l "$new")" -ne "$(wc -l "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd open &{{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
        image/*) sxiv-rifle "$f";;
        application/pdf) zathura "$f";;
        video/*) exec setsid -f -- mpv -- "$f" </dev/null 1>&0 2>&0;;
            *) xdg-open "$f" ;;
    esac
}}


# create a newdir with selected entries
cmd move-to %{{
    set -f
    if [ -d "$1" ];then
      printf "❌ $FAIL_COLOR $1 : Already exist $COLOR_END"
      exit 1
    fi
    mkdir -- "$1"
    mv -- $fx "$1"
    printf "$PASS_COLOR ✅ '$1' : created successfully. $COLOR_END"
}}

cmd export-as %{{
  if [ -f "$1" ];then
    printf "$FAIL_COLOR ❌ $1 Already exists."
  fi

  for f in $fx;do
    echo "$f" >> "$1"
  done
  printf "$PASS_COLOR 🗸 Selection exported in => 'exported_data' $COLOR_END"
}}

cmd export-as-xported %{{

  for f in $fx;do
    echo "$f" >> xported_data
  done
  printf "$PASS_COLOR 🗸 $COLOR_END Selection appended in => 'xported_data' $COLOR_END"
}}

cmd mkdirs %{{
  mkdir -p "$@"
  dirs=$(echo "$@" | sed "s/\s/,/g")
  printf "🗸 Dir(s) $PASS_COLOR ( $dirs ) $COLOR_END created."
}}

cmd list_images %{{
  sxiv -t .
}}

cmd mkfiles %{{
  mktouch "$@"
  files=$(echo "$@" | sed "s/\s/,/g")
  printf "🗸 file(s) $PASS_COLOR ( $files ) $COLOR_END created."
}}

cmd cpfilepath &{{
  echo "$f" | xclip -sel clip
  printf "$PASS_COLOR 🗸 Path Copied : $f"
}}

cmd cpdirpath &{{
  echo "$PWD" | xclip -sel clip
  printf "$PASS_COLOR 🗸 Current Directory Path Copied."
}}

# when called with no params => 755
cmd chmod %{{
  bits="755"
  if [ "$#" -eq 1 ];then
      bits="$1"
  fi
  for file in "$fx"
  do
    chmod "$bits" $file
  done

  lf -remote 'send reload'
  printf "$PASS_COLOR 🗸 Changed made to selected files."
}}

cmd sudomkfile %{{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

cmd setwallpaper %cp "$f" ~/.config/wall.png && xwallpaper --zoom "$f"
cmd broot_jump ${{
  f=$(mktemp)
  res="$(broot --outcmd $f && cat $f | sed 's/cd //')"
  rm -f "$f"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd fasd_dir ${{
   res="$(fasd -dl | grep -iv cache | fzf 2>/dev/tty | sed 's/\\/\\\\/g;s/"/\\"/g')"
   if [ -d "$res" ]; then
      cmd="cd"
   else
      cmd="select"
   fi
 lf -remote "send $id $cmd \"$res\""
 }}

cmd on-cd %{{
    # display git repository status in your prompt
    # source /usr/share/git/completion/git-prompt.sh
    # GIT_PS1_SHOWDIRTYSTATE=auto
    # GIT_PS1_SHOWSTASHSTATE=auto
    # GIT_PS1_SHOWUNTRACKEDFILES=auto
    # GIT_PS1_SHOWUPSTREAM=auto
    # GIT_PS1_COMPRESSSPARSESTATE=auto
    # git=$(__git_ps1 " [GIT BRANCH:> %s]") || true
    # fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m$git\033[0m"
    # lf -remote "send $id set promptfmt \"$fmt\""
    # adds entry into fasd database, which can be used by using key ';;'
    fasd -A "$PWD"
}}

cmd open_config  ${{
  $EDITOR $(bookmenu -b ~/.config/bookmenu/configs -f fzf -o)
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

# Trash cli bindings
cmd trash %{{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}


cmd restore_trash ${{
  trash-restore
}}

cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else
        cmd="select"
    fi
    lf -remote "send $id $cmd \"$res\""
}}

# vim like bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e

map zi
map zi fasd_dir
map go fasd_dir
# map f :fasd_dir

cmd dragon %dragon-drag-and-drop -a -x $fx
cmd dragon-stay %dragon-drag-and-drop -a $fx
cmd dragon-individual %dragon-drag-and-drop $fx
cmd cpdragon %cpdragon
cmd mvdragon %mvdragon
cmd dlfile %dlfile
# cmd cpfilepath %printf "$f" | xclip -sel clip
cmd aj %lf -remote "send $id cd '$(autojump $1)'"
map a push :aj<space>
cmd open-with %"$@" $fx
map ` push :open-with<space>
map o push :open-with<space>
cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"
cmd clear_trash %trash-empty
cmd stripspace %stripspace "$f"
map ;
map ; :fzf_jump
# File Openers
map e $$EDITOR "$f"
# map u $view "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash


map im list_images

# Broot Mapping
# map f fzf_jump

# Dragon Mapping
map dr dragon
map ds dragon-stay
map di dragon-individual
map dm mvdragon
map dc cpdragon
map dl dlfile

map ss stripspace

# Basic Functions
map . set hidden!
map DD delete
map p paste
map P paste-async
map x
map X
map x cut
map y copy
map Y cpfilepath
map <enter> open
# reset mapping for a
map a
map a push :mkfiles<space>
map mr sudomkfile
map A
map A push :mkdirs<space>
map ms push :mkscript<space>
# make the selection
map X push :chmod<space>

map br $vimv $fx

map <c-k> push 10k
map K top

map <c-j> push 10j
map J bottom

map R reload
map c
map C
map c clear
map C clear
map u unselect
# map <esc>
# map <esc> clear
# bulk rename
map <f-2> $printf '%s\n' $fx | vidir -

# Movement
map gh cd ~/

# Downloads related gd
map gd cd ~/Downloads
map gD cd ~/Downloads/@Firefox

map gt cd ~/Downloads/Telegram\ Desktop
map gT cd ~/.local/share/Trash/files
map gp cd ~/Pictures
map gP cd ~/Projects
map gs cd ~/Pictures/Screenshots
map gS cd ~/software_sources
map gw cd ~/Pictures/github/MyWallpapers

map gv cd ~/Videos
map gV cd ~/Videos/MyRecordings
map gs cd ~/.local/bin
map gS cd ~/.local/bin/custom_scripts
map ga cd ~/.local/share/applications

map gc cd ~/.config

map \;j cd ~
